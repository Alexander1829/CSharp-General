{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1049{\fonttbl{\f0\froman\fprq2\fcharset204 Cambria;}{\f1\fmodern\fprq1\fcharset204 Consolas;}{\f2\fswiss\fprq2\fcharset204 Calibri;}{\f3\fmodern\fprq1\fcharset204 Courier New;}{\f4\fnil\fcharset0 Calibri;}}
{\colortbl ;\red79\green129\blue189;\red255\green255\blue255;\red0\green0\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;\red0\green128\blue0;\red255\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\b\f0\fs26\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 (\highlight2 I\highlight0 nheriting):\cf3\highlight2\par

\pard\widctlpar\b0\f1\fs19 public\cf4  \cf3 class\cf4  \cf5 A1\cf4\par
\{\par
    \cf3 public\cf4  \cf3 string\cf4  F1 \{ \cf3 get\cf4 ; \cf3 set\cf4 ; \}    \cf3\highlight0\par
\cf4\highlight2     \cf3 public\cf4  A1()\par
    \{\par
        F1 = \cf6 "Some default string"\cf4 ;\par
    \}\par
\par
    \cf3 public\cf4  A1(\cf3 string\cf4  f1)\par
    \{\cf3\highlight0\par
\cf4\highlight2         \cf3 this\cf4 .F1 = f1;\par
    \}        \par
\}\highlight0\par
\par
\cf3\highlight2 class\cf4  \cf5 A2\cf4  : \cf5 A1\cf4\par
\{\par
    \cf3 public\cf4  \cf3 string\cf4  F2 \{ \cf3 get\cf4 ; \cf3 set\cf4 ; \}\par
\par
    \cf3 public\cf4  A2(\cf3 string\cf4  f2, \cf3 string\cf4  f1) : \cf3 base\cf4 (f1)\par
    \{\par
        F2 = f2;\par
    \}\par
\par
    \cf3 public\cf4  A2() /*: base()*/\par
    \{     \par
        F2 = \cf6 "Another string"\cf4 ;\par
    \}\par
\}\highlight0\par
\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\b\f0\fs26 NullReferenceException\par

\pard\widctlpar\cf3\b0\f1\fs19 class\cf4  \cf5 A\cf4\par
\{\par
    \cf3 public\cf4  \cf3 string\cf4  str1; /*row1*/ \par
    /*row1 Equvivalent to  \cf3 public\cf4  \cf3 string\cf4  str1 = (\cf3 string\cf4 )\cf3 null\cf4 ;*/\par
    /*row1 Equvivalent to  \cf3 public\cf4  \cf3 string\cf4  str1; public A()\{ str1 = (\cf3 string\cf4 )\cf3 null\cf4 ; \}*/\par
\par
    \{ \par
        Console.WriteLine(\cf3 new\cf4  A().instStr1.Length); \cf7 // System.NullReferenceException\cf4\par
    \}\par

\pard\widctlpar\sa200\sl276\slmult1\}\par

\pard\widctlpar\sa200\sl276\slmult1\tx3675\par
\cf0\f2\fs32\par

\pard\widctlpar\cf3\f1\fs19\line\line\cf0\f2\fs22\par
\par

\pard\widctlpar\sa200\sl276\slmult1\par
\par
\line\par
\par
\page\par

\pard\widctlpar\sa200\sl276\slmult1\qc LINQ\par

\pard\widctlpar\cf3\highlight2\f1\fs19 string\cf4 [] mstr = \{ \cf6 "ab"\cf4 , \cf6 "cd"\cf4 , \cf6 "cd"\cf4  \};\par
\cf5 List\cf4 <\cf3 string\cf4 > lstr = \cf3 new\cf4  \cf5 List\cf4 <\cf3 string\cf4 >();\par
lstr.Add(\cf6 "ab"\cf4 );\par
lstr.Add(\cf6 "cd"\cf4 );\par
lstr.Add(\cf6 "de"\cf4 );\par
lstr.Add(\cf6 "cd"\cf4 );\par
lstr.Add(\cf6 "cd"\cf4 );\par
\par
\cf3 var\cf4  query =\par
    \cf3 from\cf4  el \cf3 in\cf4  lstr\par
    \cf3 where\cf4  el != \cf6 "ab"\cf4\par
    \cf3 select\cf4  el;\par
\par
\cf3 var\cf4  query2 =\par
    \cf3 from\cf4  el \cf3 in\cf4  lstr\par
    \cf3 join\cf4  em \cf3 in\cf4  mstr \cf3 on\cf4  el \cf3 equals\cf4  em\par
    \cf3 select\cf4  el;\par
\par
\cf3 var\cf4  query3 =\par
    \cf3 from\cf4  el \cf3 in\cf4  lstr\par
    \cf3 where\cf4  el != \cf6 "ab"\cf4\par
    \cf3 group\cf4  el \cf3 by\cf4  el \cf3 into\cf4  g\par
    \cf3 select\cf4  \cf7 /*new \{ a =*/\cf4  g.Key \cf7 /*\}*/\cf4 ;\par
\par
\cf3 foreach\cf4  (\cf3 var\cf4  e \cf3 in\cf4  query3)\par
\{\par
    \cf5 Console\cf4 .WriteLine(e);\par
\}\par
\cf0\highlight0\f2\fs22 //////////////////////\par
\cf3\highlight2\f1\fs19 var\cf4  query1 = \cf3 from\cf4  \cf3 char\cf4  c \cf3 in\cf4  charMass\par
             \cf3 group\cf4  c \cf3 by\cf4  c \cf3 into\cf4  g\par

\pard\widctlpar\sa200\sl276\slmult1\tx3675              \cf3 select\cf4  \cf3 new\cf4  \{\ulth  \cf0\highlight0 a\cf4\highlight2  \ulnone = g.\ulth Key\ulnone ,\ulth  \highlight0 b\highlight2  \ulnone = g.\ulth Count()\ulnone  \}\highlight0\ulth ;\ulnone  // \'d1\'ee\'e7\'e4\'e0\'b8\'ec \'e0\'ed\'ee\'ed\'e8\'ec\'ed\'fb\'e9 \'ee\'e1\'fa\'e5\'ea\'f2. \'cd\'e0\'f2\'fc \'f5\'ee\'f2\'fc \'ea\'e0\'ea-\'f2\'ee \'ee\'e1\'ee\'e7\'e2\'e0\'f2\'fc, \'ef\'f0\'ee\'f1\'f2\'ee \'ed\'e5 \'e2\'ee\'e7\'fc\'ec\'b8\'f2\line\cf0\f2\fs22 //////////////////////\cf5\highlight2\f1\fs19\par

\pard\widctlpar\cf3 var\cf4  custSupJoin =\par
    \cf3 from\cf4  sup \cf3 in\cf4  suppliers\par
    \cf3\highlight0 join\cf4\highlight2  cust \cf3 in\cf4  customers \cf3 on\cf4  sup.Country \cf3 equals\cf4  cust.Country\par
    \cf3 select\cf4  \cf3 new\cf4  \{ Country = sup.Country, SupplierName = sup.SupplierName, CustomerName = cust.CompanyName \};\highlight0\line\cf3\line var\cf4  categories =\par
    \cf3 from\cf4  prod \cf3 in\cf4  products\par
    \cf3 group\cf4  prod \cf3 by\cf4  prod.Category \cf3 into\cf4  prodGroup\par

\pard\widctlpar\sa200\sl276\slmult1     \cf3 select\cf4  \cf3 new\cf4  \{ Category = prodGroup.Key, TotalUnitsInStock = prodGroup.Sum(p => p.UnitsInStock) \};\cf0\f2\fs22\par
\par
\par
\par
\par
\page\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\highlight2\b\f0\fs26\'ca\'eb\'e0\'f1\'f1\'fb File \'e8 FileInfo\par

\pard\widctlpar\cf5\b0\f1\fs19 File \cf4\endash  \'f1\'f2\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'e9 \'ea\'eb\'e0\'f1\'f1. \cf5 FileInfo\cf0\highlight0\f2\fs22 , \'f1\'ee\'e7\'e4\'e0\'b8\'ec \'ee\'e1\'fa\'e5\'ea\'f2 \'e8 \'ef\'f0\'e8\'ec\'e5\'ed\'ff\'e5\'ec \'ee\'e1\'fa\'e5\'ea\'f2\'ed\'fb\'e5 \'ec\'e5\'f2\'ee\'e4\'fb\par
 \line\'d2\'ee\'f7\'ed\'ee \'f2\'e0\'ea\'e6\'e5 \'e4\'eb\'ff \'ef\'e0\'ef\'ee\'ea \cf5\highlight2\f1\fs19 Directory\cf0\highlight0\f2\fs22  \cf4\highlight2\f1\fs19\'e8\cf5  DirectoryInfo\highlight0 .\cf0\f2\fs22\par
\cf5\highlight2\f1\fs19\par
File\cf4 .Copy();\par
\cf5 File\cf4 .Exists();\line\cf5 File\cf4 .AppendAllText(filePath, \cf6 "\\n56"\cf4 );\line\cf5 File\cf4 .Create();\cf5\par
Directory\cf4 .Exists();\par
\cf5 Directory\cf4 .GetFiles();\par
\cf5 Directory\cf4 .GetDirectories();\par
\cf5 Directory\cf4 .GetCurrentDirectory();\par
\cf0\highlight0\f2\fs22\par
\cf3\highlight2\f1\fs19 public\cf4  \cf3 static\cf4  \cf3 class\cf4  \cf5 File \cf4\{\'85\}\cf0\highlight0\f2\fs22\par
\cf3\highlight2\f1\fs19 public\cf4  \cf3 static\cf4  \cf3 class\cf4  \cf5 Directory \cf4\{\'85\}\cf0\highlight0\f2\fs22\par
\cf3\highlight2\f1\fs19 public\cf4  \cf3 static\cf4  \cf3 class\cf4  \cf5 Path \cf4\{\'85\}\cf5\highlight0\tab\cf0\f2\fs22\par
\line\cf5\highlight2\f1\fs19 Path\cf4 .Combine();\cf0\highlight0\f2\fs22\par

\pard\widctlpar\li708\line\'cf\'f0\'e8\'ec\'e5\'f0:\par

\pard\widctlpar\cf3\f1\fs19 var\cf4  fileName = Path.Combine(\cf6 "Y:\\\\"\cf4 , \cf6 "newfile.txt"\cf4 );            \par
FileInfo fInfo = \cf3 new\cf4  FileInfo(fileName);\par
\cf3 var\cf4  writer = fInfo.AppendText(); --\'e4\'ee\'ef\'e8\'f1\'e0\'f2\'fc \'e2 \'f4\'e0\'e9\'eb \'e8(!) \'f1\'ee\'e7\'e4\'e0\'f2\'fc, \'e5\'f1\'eb\'e8 \'ed\'e5 \'e1\'fb\'eb \'f1\'ee\'e7\'e4\'e0\'ed \'e4\'ee.\par
writer.WriteLine(\cf6 "test_line3"\cf4 );\par
writer.WriteLine(\cf6 "test_line4"\cf4 );\par
writer.Dispose();\par
\cf0\f2\fs22\par

\pard\widctlpar\qc\cf1\b\f0\fs26\'c6\'f3\'f0\'ed\'e0\'eb\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5\par

\pard\widctlpar\cf3\b0\f1\fs19\line string\cf4  eventLog = \cf6 "Application"\cf4 ;\par
\cf3 string\cf4  eventSource = \cf6 "Logging Demo"\cf4 ;\par
\cf3 if\cf4  (!EventLog.SourceExists(eventSource))\par
    EventLog.CreateEventSource(eventSource, eventLog);\par
\par
EventLog.WriteEntry(eventSource, \cf6 "Application started"\cf4 );\par

\pard\widctlpar\sa200\sl276\slmult1\cf0\f2\fs22\par

\pard\widctlpar\par
\tab\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par

\pard\widctlpar\sa200\sl276\slmult1\f0\fs32\par
\page\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\b\fs26\'d1\'e5\'f0\'e8\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'ff \'ee\'e1\'fa\'e5\'ea\'f2\'e0.\par

\pard\widctlpar\cf4\b0\f1\fs19 using System.Runtime.Serialization.Formatters.Binary;\par
\par
ServiceConfigutation config = \cf3 new\cf4\par
    ServiceConfigutation();\par
\par
IFormatter formatter = \cf3 new \cf4 BinaryFormatter();\par
FileStream buffer = File.Create (\cf6 "filepath"\cf4 );\par
\par
formatter.Serialize(buffer, config);\par
buffer.Close();\par
\cf7 /////////////////////////// \par
//\'c4\'e5\'f1\'e5\'f0\'e8\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'ff\cf4\par
\par
IFormatter formatter2 = \cf3 new\cf4  BinaryFormatter();\par
FileStream buffer2 = File.OpenRead (\cf6 "filepath"\cf4 );\par
\par
ServiceConfigutation config2 =\par
    formatter2.Deserialize(buffer2) \cf3 as\cf4  ServiceConfigutation;\par

\pard\widctlpar\sa200\sl276\slmult1 buffer2.Close();\par
\par
\par
\par

\pard\widctlpar\cf3\par
\par

\pard\widctlpar\sa200\sl276\slmult1\page\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\b\f0\fs26\'cf\'f0\'e8\'ec\'e5\'f0: \'dd\'ea\'e7\'e5\'ec\'ef\'eb\'ff\'f0 \'e8 \'f1\'f1\'fb\'eb\'ea\'e0 \'ed\'e0 \'fd\'ea\'e7\'e5\'ec\'ef\'eb\'ff\'f0.\cf3\f1\fs19\par

\pard\widctlpar\b0\par
char\cf4 [] sch1 = \cf3\highlight8 new\cf4  \cf3\highlight0 char\cf4 [] \{ \cf6 'a'\cf4 , \cf6 'a'\cf4 , \cf6 'a'\cf4 , \cf6 'a'\cf4 , \cf6 'a'\cf4\};\par
\cf3 char\cf4 [] sch2 = sch1;\par
\cf3 for\cf4  (\cf3 int\cf4  i = 0; i < sch2.Length; i++)\par
    sch2[i] = \cf6 'b'\cf4 ;            \par
\cf3 for\cf4  (\cf3 int\cf4  i = 0; i < sch1.Length; i++)\par

\pard\widctlpar\sa200\sl276\slmult1     Console.WriteLine(sch1[i]);\line /*\line Output:\line b\line b\line b\line b\line b\line */\line\cf3\line char\cf4 [] sch1 = \cf3\highlight8 new\cf4  \cf3\highlight0 char\cf4 [] \{ \cf6 'a'\cf4 , \cf6 'a'\cf4 , \cf6 'a'\cf4 , \cf6 'a'\cf4 , \cf6 'a'\cf4\};\line\cf3 char\cf4 [] sch2 = sch1;\line sch2 = \cf3\highlight8 new\cf4  \cf3\highlight0 char\cf4 [] \{ \cf6 'b'\cf4 , \cf6 'b'\cf4 , \cf6 'b'\cf4 , \cf6 'b'\cf4 , \cf6 'b'\cf4  \}; \tab /*\'d2\'e5\'ef\'e5\'f0\'fc \'f1\'f1\'fb\'eb\'ea\'e0 \'absch2\'ab \'f3\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'ed\'e0 \'e4\'f0\'f3\'e3\'ee\'e9(!)*/\line\cf3 for\cf4  (\cf3 int\cf4  i = 0; i < sch1.Length; i++)\tab\tab /*\'fd\'ea\'e7\'e5\'ec\'ef\'eb\'ff\'f0 \'e0 \'f7\'e5\'f0\'e5\'e7 \'f1\'f1\'fb\'eb\'ea\'e8 \'ed\'e0 \'ef\'e5\'f0\'e2\'fb\'e9 \'fd\'ea\'e7\'e5\'ec\'ef\'eb\'ff\'f0 \line     Console.WriteLine(sch1[i]);\tab\tab\tab /*\'ec\'fb \'ed\'e8\'f7\'e5\'e3\'ee \'ed\'e5 \'ec\'e5\'ed\'ff\'eb\'e8 */\line /*\line Output:\line a \line a\line a\line a\line a\line */\cf7\par

\pard\widctlpar\cf3\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par

\pard\widctlpar\sa200\sl276\slmult1\qc\cf1\b\f0\fs26 Dependency injection\par

\pard\widctlpar\sa200\sl276\slmult1\cf0\b0\f2\fs22\'d7\'e5\'ec \'f5\'ee\'f0\'ee\'f8\'ee DI \'ef\'ee\'ec\'e8\'ec\'ee \'ee\'f1\'ed\'ee\'e2\'ed\'ee\'e3\'ee \'f1\'e2\'ee\'e9 \'ed\'e0\'e7\'ed\'e0\'f7\'e5\'ed\'e8\'ff: \'ee\'ed \'ed\'e0 \'fd\'f2\'e0\'ef\'e5 \'ea\'ee\'ec\'ef\'e8\'eb\'ff\'f6\'e8\'e8 \'ee\'f2\'f0\'e0\'e1\'ee\'f2\'e0\'eb \'e8 \'e2\'f1\'b8. \'cf\'f0\'ee\'e5\'ea\'f2-\'ef\'f0\'ee\'e3\'e0 \'f1\'ee\'e1\'f0\'e0\'eb\'e0\'f1\'fc, \'f0\'e0\'e1\'ee\'f2\'e0\'e5\'f2, \'ed\'e5 \'f2\'ee\'f0\'ec\'ee\'e7\'e8\'f2! \line\par
\page\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\cf3\b\f0\fs26\tab\tab\tab\tab\cf1 Http Request, Response\par

\pard\widctlpar\cf3\b0\f1\fs19 var\cf4  uri = \cf6 "{{\field{\*\fldinst{HYPERLINK http://asd.com }}{\fldrslt{http://asd.com\ul0\cf0}}}}\f1\fs19 "\cf4 ;\par
\cf3 var\cf4  request1 = WebRequest.Create(uri) \cf3 as\cf4  HttpWebRequest;\par
\cf3 var\cf4  dataReq1 = Encoding.Default.GetBytes(\par
    \cf6 "\{\\"field1\\":\\"val@1\\"\}"\cf4\par
    );\par
request1.Method = \cf6 "POST"\cf4 ;\par
request1.ContentType = \cf6 "application/json"\cf4 ;\par
request1.ContentLength = dataReq1.Length;\par
\cf7 //\cf4 request1.Credentials = \cf3 new\cf4  NetworkCredential(\cf6 "userName"\cf4 ,\cf6 "secretPasswd"\cf4 ); //\'c4\'eb\'ff \'e0\'e2\'f2\'ee\'f0\'e8\'e7\'e0\'f6\'e8\'e8 \'ed\'e0 \'f1\'e5\'f0\'e2\'e5\'f0\'e5\par
\cf3 var\cf4  dataStream = request1.GetRequestStream();\par
dataStream.Write(dataReq1, 0, dataReq1.Length); \cf7 //!\cf4\par
dataStream.Close(); \cf7 //!\cf4\par
\line\par
\cf3 var\cf4  response = request1.GetResponse() \cf3 as\cf4  HttpWebResponse;\par
\cf3 var\cf4  stream = \cf3 new\cf4  StreamReader(response.GetResponseStream());\par
\cf7 //stream.ReadLine(); \cf4\par

\pard\widctlpar\sa200\sl276\slmult1 stream.Close();\cf0\f2\fs22  \line\line\line http \endash  hypper text transport protocol\par

\pard\widctlpar\par
\par
\par
\par

\pard\widctlpar\sa200\sl276\slmult1\par
\par
\cf4\f1\fs19\par
\par
\par
\par
\par
\par
\par
\par
\page\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\b\f0\fs26 Methods\par

\pard\widctlpar\cf0\b0\f2\fs22 Extension method-\'fb - method-\'fb, \'f7\'f2\'ee\'e1\'fb \'e2\'ee\'f2\'ea\'ed\'f3\'f2\'fc \'e8\'f5 \'e2 \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f9\'e8\'e9 \'ea\'eb\'e0\'f1\'f1, \'e1\'e5\'e7 \'e8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'ff \'ea\'ee\'e4\'e0 \'fd\'f2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.(\'e8 \'e1\'e5\'e7 \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'ed\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0-\'ed\'e0\'f1\'eb\'e5\'e4\'ed\'e8\'ea\'e0)\line\cf3\highlight2\f1\fs19 public\cf4  \cf3 static\cf4  \cf3 class\cf4  \cf5 StatCl\cf4\par
\{\par
    \cf3 public\cf4  \cf3 static\cf4  \cf3 bool\cf4  IsGoodPassword(\cf3 this\cf4  \cf3 string\cf4  s)\par
    \{\par
        \cf3 return\cf4  s.Length > 7;\par
    \}\par

\pard\widctlpar\sa200\sl276\slmult1\tx3675\}\highlight0\par

\pard\widctlpar\sa200\sl276\slmult1\cf0\f2\fs22 //\'ce\'ef\'f6\'e8\'ee\'ed\'e0\'eb\'fc\'ed\'fb\'e5 \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'fb \'ec\'e5\'f2\'ee\'e4\'e0:\line public void ExampleMethod(int required, string optionalstr = "default string", int optionalint = 10)\{ \}\par
//\'c8\'ed\'f2\'e5\'f0\'e5\'f1\'ed\'fb\'e9 \'ef\'f0\'e8\'ec\'e5\'f0:\line\cf4\f1\fs19 public static void DatesToPeriodConverter(DateTime start, DateTime end = DateTime.MinValue, out string date, out string time) \{ \} // - incorrect \cf0\f2\fs22\par

\pard\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf4\f1\fs19 // - correct\cf0\line\cf4   public static void DatesToPeriodConverter(DateTime start, DateTime? end = null,\par
     out string date, out string time)\par
\{\par
    var effectiveEnd = end ?? DateTime.MinValue; // \cf0\f3\fs20\'e8 \'f2.\'e4.\cf4\f1\fs19\par
\}  \par

\pard\widctlpar\cf0\f2\fs22\line\line\'cc\'e5\'f2\'ee\'e4 \'ec\'ee\'e6\'ed\'ee \'f1\'e4\'e5\'eb\'e0\'f2\'fc abstract - \'ef\'f0\'ee\'f1\'f2\'ee \'e7\'e0\'e3\'eb\'f3\'f8\'ea\'e0 \'e1\'e5\'e7 \'f0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'e8(\'d2\'ee\'e3\'e4\'e0 \'e8 \'e2\'e5\'f1\'fc \'ea\'eb\'e0\'f1\'f1 \'ef\'f0\'e8\'e4\'b8\'f2\'f1\'ff \'f1\'e4\'e5\'eb\'e0\'f2\'fc abstract)\line\line\cf3\f1\fs19 abstract\cf4  \cf3 class\cf4  \cf5 Foo1\cf4\par
\{\par
    \cf3\ulc4\ul public\cf4\ulnone  \cf3 abstract\cf4  \cf3 void\cf4  AbstrMet();\par
\} \par
\cf0\f2\fs22 abstract \'ec\'e5\'f2\'ee\'e4 \'f1\'f7\'e8\'f2\'e0\'e5\'f2\'f1\'ff \'e0\'e2\'f2\'ee\'ec\'e0\'f2\'ee\'ec virtual \line\cf4\f1\fs19\par
\cf3 abstract\cf4  \cf3 class\cf4  \cf5 Foo2\cf4 : Foo1\par
\{\par
    \cf3\ulc4\ul public\cf4\ulnone  \cf3 abstract\cf4  \cf3\ulc4\ul override\cf4\ulnone  \cf3 void\cf4  AbstrMet();\par
\}\cf0\f2\fs22\line\par
///out , ref \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'fb.\par
//ref \'e4\'ee\'eb\'e6\'ed\'fb \'e8\'ed\'e8\'f6\'e8\'e0\'eb\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'e4\'ee \'e2\'fb\'e7\'ee\'e2\'e0 \par
\cf4\f1\fs19 static void test(\cf3\highlight2 ref\cf4\highlight0  \cf3\highlight2 int\cf4  \highlight0 a)\par
\{\par
    a++;\par
    Console.WriteLine("test a = \{0\}", a);\par
\}\par
\par
\cf0\f2\fs22 //out \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2 \'ec\'ee\'e6\'ed\'ee \'ee\'e1\'fa\'ff\'e2\'e8\'f2\'fc, \'e1\'e5\'e7 \'e8\'ed\'e8\'f6\'e8\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'e8\cf4\f1\fs19\par
static void test2(\cf3\highlight2 out\cf4\highlight0  \cf3\highlight2 int\cf4  \highlight0 a)\par
\{\par
    a = 10;\par
    a++;\par
    Console.WriteLine("test a = \{0\}", a);\par
\}\cf0\f2\fs22\par

\pard\widctlpar\sa200\sl276\slmult1\cf4\f1\fs19\page\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\b\f0\fs26\'c7\'e0\'e4\'e0\'f7\'e8 \'f2\'e8\'ef\'e0 Task, \'c0\'f1\'e8\'ed\'f5\'f0\'ee\'ed\'ed\'fb\'e5 \'ec\'e5\'f2\'ee\'e4\'fb.\par

\pard\widctlpar\cf0\b0\f2\fs22 Thread- \'fb,\line TPL  c 4.0 Framework \endash  Task, \'e7\'e0\'e4\'e0\'f7\'e0. \'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'fc\'ed\'e0\'ff \'ee\'f1\'ed\'ee\'e2\'ed\'ee\'ec\'f3 \'ef\'ee\'f2\'ee\'ea\'f3.\par
c .Net Framework  4.5 C#: async/await\line\line\line\cf4\f1\fs19 Task task1 = \cf3 new\cf4  Task(\cf3 new\cf4  Action(MyMethod));\par
Task task2 = \cf3 new\cf4  Task(\cf3 delegate\cf4  \{ MyMethod(); \});\par
Task task3 = \cf3 new\cf4  Task(() =>  MyMethod());\par
task1.Start(); \cf7 //\'c7\'e0\'e4\'e0\'f7\'e0 \'f1\'f2\'e0\'f0\'f2\'ee\'e2\'e0\'eb\'e0!! \'cf\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'fc\'ed\'ee!!\cf4\par
\cf7 /////\cf4\par
task1.Wait(); \cf7 //\'d5\'ee\'f2\'e8\'ec \'e7\'e0\'f7\'e5\'ec-\'f2\'ee \'e4\'ee\'e6\'e4\'e0\'f2\'fc\'f1\'ff\cf4\par
Task.WaitAll(task1, task2, task3);\cf7 //\'d5\'ee\'f2\'e8\'ec \'e4\'ee\'e6\'e4\'e0\'f2\'fc\'f1\'ff \'e2\'f1\'e5\'f5\cf4\par
\par
Task<\cf3 string\cf4 > task4 = Task.Run<\cf3 string\cf4 >(()=>DateTime.Now.ToString());\par
\cf3 var\cf4  result = task4.Result;\par
\par
CancellationTokenSource cts = \cf3 new\cf4  CancellationTokenSource();\par
CancellationToken ct = cts.Token;\par
\par
Task.Run(()=> DoWork(ct));\par
\par
\cf3 static\cf4  \cf3 void\cf4  DoWork(CancellationToken token)\par
\{\par
    \cf7 //...\cf4\par
    \cf3 if\cf4  (token.IsCancellationRequested)\par
    \{\par
        \cf7 //Closing...\cf4\par
        \cf3 throw\cf4  \cf3 new\cf4  OperationCanceledException();\par
        \cf7 //return; \cf4\par
    \}\par
\}\par
\cf0\f2\fs22\par
\par
\par
\cf3\f1\fs19 double\cf4 [] dArr = \cf3 new\cf4  \cf3 double\cf4 [50000];\par
Parallel.For(0, 50000, l => \par
\{\par
    dArr[l] = Math.Sqrt(l);\par
\});\cf0\f2\fs22\par
\par
\cf3\f1\fs19 var\cf4  coffeeList = \cf3 new\cf4  List<Coffee>();\par
\cf3 foreach\cf4  (Coffee coffee \cf3 in\cf4  coffeeList)\par
\{\par
    CkeckAvailability(coffee);\par
\}\par
//\'dd\'ea\'e2\'e8\'e2\'e0\line Parallel.ForEach(coffeeList, l => CkeckAvailability(l));\cf0\f2\fs22\par
\par
\par
\cf3\f1\fs19 var\cf4  strongCoffees =\par
    \cf3 from\cf4  coffee \cf3 in\cf4  coffeeList.AsParallel()\par
    \cf3 where\cf4  coffee.Strength > 3\par
    \cf3 select\cf4  coffee;\cf0\f2\fs22\par
\par
\line\cf4\f1\fs19\{ \par
Task<\cf3 string\cf4 > firstTask = \cf3 new\cf4  Task<\cf3 string\cf4 >(()=> \{ \cf3 return\cf4  \cf6 "Hello!"\cf4 ; \});\par
\par
Task<\cf3 string\cf4 > secondTask = firstTask.ContinueWith((fres) =>\par
\{\par
    \cf3 return\cf4  String.Format(\cf6 "\{0\}, World!"\cf4 , fres.Result);\par
\});\par
\par
firstTask.Start();\par
Console.WriteLine(secondTask.Result);\par
\}\par
\'ce\'d1\'ed\'ee\'e2\'e0: \'e2\'fb\'e8\'e3\'f0\'fb\'f8 \'ef\'f0\'e8 \'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'fc\'ed\'ee\'f1\'f2\'e8 \'ec\'ee\'e6\'e5\'f2 \'e1\'fb\'f2\'fc \'e4\'e4\'ee\'f1\'f2\'e8\'e3\'ed\'f3\'f2 \'d2\'ce\'cb\'dc\'ca\'ce \'ed\'e0 \'ec\'ed\'ee\'e3\'ee\'ff\'e4\'e5\'f0\'ed\'ee\'ec \'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'ee\'f0\'e0\'f5.\line List Exception-\'e2, \'ef\'e5\'f0\'e5\'e1\'f0\'e0\'f2\'fc \'e8 \'e4\'ee\'e1\'f0\'e0\'f2\'fc\'f1\'ff \'e4\'ee \'e8\'e7\'ed\'e0\'f7\'eb\'fc\'ed\'ee\'e3\'ee Exception\'e0.\line\line\cf3 try\cf4\par
\{\par
    task1.Wait();\par
\}\par
\cf3 catch\cf4  (AggregateException ex)\par
\{\par
    \cf3 foreach\cf4  (var inner \cf3 in\cf4  ex.InnerExceptions)\par
    \{\par
        \cf7 //Handle each exception in turn\cf4\par
    \}\par
\}\par
_______________________________________________________________\par
\par
\cf0\f2\fs22\par
\par
\cf3\f1\fs19 private\cf4  \cf3\highlight9 async\cf4  \cf3\highlight0 void\cf4  btnLongOperation_click(\cf3 object\cf4  sender)\par
\{\par
\par
    Task<\cf3 string\cf4 > task1 = Task.Run<\cf3 string\cf4 >(()=> \{\par
        \cf7 //...\cf4\par
        \cf3 return\cf4  String.Format(\cf6 ""\cf4 ); \});\par
    lblResult.Content =  \cf3 await\cf4  task1;\cf7 //\'dd\'f2\'ee \'ed\'e5\'e5\'e5\'e5\cf4\par
    \cf7 //lblResult.Content = task1.Result;\par
\cf4     \cf7 //\'dd\'f2\'ee \'e2\'e5\'f0\'ed\'f3\'f2\'fc\'f1\'ff \'e2 \'fd\'f2\'f3 \'f1\'f2\'f0\'ee\'f7\'ea\'f3 \'e8 \'e7\'e0\'ef\'e8\'f1\'e0\'f2\'fc Result \'e2 lblResult.Content\cf4\par
\}\par
\cf0\f2\fs22\par
\cf3\f1\fs19 private\cf4  \cf3\highlight9 async\cf4  \highlight0 Task<\cf3 string\cf4 > GetData()\par
\{\par
    \cf3 var\cf4  result = \cf3 await\cf4  Task.Run<\cf3 string\cf4 >(\par
        () => \{\par
            \cf7 //.... Thread.Sleep(10000);            \cf4\par
            \cf3 return\cf4  \cf6 "Operation Complete."\cf4 ;\par
        \}\par
        );\par
    \cf3 return\cf4  result;\par
\}\cf0\f2\fs22\par
\par
\cf3\f1\fs19 private\cf4  \cf3\highlight9 async\cf4  \cf3\highlight0 void\cf4  btnGetData_click(\cf3 object\cf4  sender)\par
\{\par
    lblResult.Content = \cf3 await\cf4  GetData();\par
\}\par
\cf0\f2\fs22  \'ab\'c2 \'ee\'f2\'e4\'e5\'eb\'fc\'ed\'ee\'ec \'ef\'ee\'f2\'ee\'ea\'e5\'bb\par
 \'ce\'e1\'f0\'e0\'e1\'ee\'f2\'f7\'e8\'ea \'e2 \'ee\'f1\'ed\'ee\'e2\'ed\'ee\'ec \'ef\'ee\'f2\'ee\'ea\'e5.\par
\'ce\'f1\'ed\'ee\'e2\'ed\'ee\'e9 \'ef\'ee\'f2\'ee\'ea \'ed\'e5 \'e1\'eb\'ee\'ea\'e8\'f0\'f3\'e5\'f2\'f1\'ff.\line\cf4\f1\fs19\par
\cf3\par
\cf4 Customer customer = new Customer();\cf3\line var\cf4  widgetsTask = _widgetService.GetAllWidgets();\par
\cf3 var\cf4  foosTask = _fooService.GetAllWidgets();\par
customer.Widgets = \cf3 await\cf4  widgetsTask;\par
customer.Foos = \cf3 await\cf4  foosTask;\par
\par
\cf3 return\cf4  customer;\cf0\f2\fs22\par
\cf4\f1\fs19\par
\par
\par
\par
\cf0\f2\fs22\par
\par

\pard\widctlpar\sa200\sl276\slmult1\par

\pard\keep\keepn\widctlpar\s2\sb200\sl276\slmult1\qc\cf1\b\f0\fs26 Constraints\par

\pard\widctlpar\cf4\b0\f1\fs19\line\cf3 //public\cf4  \cf3 static\cf0  \cf3 interface\cf4  \cf5\ulc10\ulwave ISt\ulnone  \cf4 // static \'ed\'e5\'eb\'fc\'e7\'ff \'e2 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1\'e0\'f5.\cf0\par
//\{\par
//\}\par
\cf3\line //public\cf4  \cf3 interface\cf4  \cf5 ISt\cf4\par
//\{\par
//    \cf3 static\cf4  \cf3 void\cf4  \ulc10\ulwave MStat\ulnone (); //static \'ed\'e5\'eb\'fc\'e7\'ff \'e2 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1\'e0\'f5.\par
//\}\line\line\cf3 //static\cf4  \cf3 class\cf4  \cf0 ClassSt2\cf4  /*: \cf0 ClassSt2 \cf4 */ //\cf0\f2\fs22  \cf4\f1\fs19\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'f2\'ee\'eb\'fc\'ea\'ee \'ee\'f2 System.Object\par
//\{\par

\pard\widctlpar\sa200\sl276\slmult1\tx3675 //\}\line\par
\cf3\highlight2 public\cf4  \cf3 class\cf4  \cf5 CustomList\cf4 <\cf5 T\cf4 > \cf3 where\cf4  \cf5 T\cf4  : \cf5 ICollection\cf4  \{ \}\cf0\highlight0\f2\fs22  // \'d2\'e5\'ef\'e5\'f0\'fc \'ec\'ee\'e6\'ed\'ee \'f2\'e8\'ef\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'fd\'f2\'f3 \'ea\'ee\'eb\'eb\'e5\'ea\'f6\'e8\'fe \'f2\'ee\'eb\'fc\'ea\'ee \'ea\'eb\'e0\'f1\'f1\'e0\'ec\'e8 (\'c8\'cb\'c8 \'d1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'e0\'ec\'e8) \'f0\'e5\'e0\'eb\'e8\'e7\'f3\'fe\'f9\'e8\'ec\'e8 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1  \highlight2\f1\fs19 ICollection\highlight0\f2\fs22 .\line public class CustomList<T>   where  T : IBeverage, IComparable<T>, new(), struct (\'f2\'ee\'eb\'fc\'ea\'ee \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'e0\'ec\'e8), class (\'f2\'ee\'eb\'fc\'ea\'ee \'ea\'eb\'e0\'f1\'f1\'e0\'ec\'e8)\line\par
\cf5\f1\fs19\par

\pard\widctlpar\cf0\f2\fs22\line\par

\pard\widctlpar\sa200\sl276\slmult1\par
\par
\page\par

\pard\widctlpar\qc\highlight10\par
\'c3\'cb\'c0\'c2\'cd\'db\'c9 \'cf\'d0\'c8\'cd\'d6\'c8\'cf \'cf\'d0\'ce\'c3\'d0\'c0\'cc\'cc\'c8\'d0\'ce\'c2\'c0\'cd\'c8\'df:\par
\'ca\'c0\'ca\'ce\'c5-\'d2\'ce \'d0\'c5\'d8\'c5\'cd\'c8\'c5, \'cd\'ce \'d0\'c5\'d8\'c5\'cd\'c8\'c5 -\line\'cd\'c5\'d1\'d0\'c0\'c2\'cd\'c8\'cc\'ce \'cb\'d3\'d7\'d8\'c5 \'d1\'d3\'cf\'c5\'d0\'ca\'d0\'c0\'d1\'c8\'c2\'ce\'c3\'ce\par
\'cc\'c5\'d7\'d2\'c0\'cd\'c8\'df \'cd\'c5 \'c2 \'ca\'ce\'c4\'c5\highlight0\par

\pard\sa200\sl276\slmult1\f4\lang9\par
}
 