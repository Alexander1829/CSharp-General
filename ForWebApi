1) Supporting for POST method both application/json and application/x-www-form-urlencoded types

        [HttpPost]
        [Route("api/v{version:apiVersion}/auth/mobileid/notification")]
        [ProducesResponseType(200)]
        [ProducesResponseType(403)]
        [ProducesResponseType(500)]
        public IActionResult MobileIdSiCallback(AuthMobileIdCallbackRequest request)
        {
            return MobileIdSiCallback(request, HttpContext.User.Identity as ClaimsIdentity);
        }

        [ApiExplorerSettings(IgnoreApi = true)]
        [HttpPost]
        [Route("api/v{version:apiVersion}/auth/mobileid/notification")]
        [ProducesResponseType(200)]
        [ProducesResponseType(403)]
        [ProducesResponseType(500)]
        [Consumes("application/x-www-form-urlencoded")]
        public IActionResult MobileIdSiCallbackUrlEncoded([FromForm] AuthMobileIdCallbackRequest request)
        {
            return MobileIdSiCallback(request, HttpContext.User.Identity as ClaimsIdentity);
        }

        private IActionResult MobileIdSiCallback(AuthMobileIdCallbackRequest request, ClaimsIdentity identity)
        {
            AuthMobileIdCallbackResponse res = serviceClient.GetAuthMobileIdCallbackResponse(request, identity);

            return res.TokenValid switch
            {
                false => new ContentResult
                {
                    StatusCode = (int)HttpStatusCode.Forbidden,
                    Content = "Invalid token or request data"
                },
                true => Ok()
            };
        }

2) Small temporary apis for 

IOptions<FileLoggerOptions> fileLoggerOptions;

//get deploy time. temporary
[HttpGet("deploy-time")]
public string DeployTime()
{
	var assemblyPath = Assembly.GetExecutingAssembly().Location;
	var creationTime = System.IO.File.GetCreationTime(assemblyPath);
	return creationTime.ToString();
}

//get log. temporary
[HttpGet("getlog")]
public object? GetLog(string? date = null)
{
	if (string.IsNullOrEmpty(date))
		date = DateTime.Now.ToString("yyyy-MM-dd");
	var fileName = fileLoggerOptions.Value!.FileNameTemplate!.Replace("{date}", date);
	var filePath = Path.Combine(fileLoggerOptions.Value!.FolderPath!, fileName);
	if (System.IO.File.Exists(filePath))
	{
		string text = System.IO.File.ReadAllText(filePath);
		return text;
	}
	return null;
}

//create entity, for example, token
[HttpGet("token/{msisdn}")]
public string Token(string msisdn) => SignedJwtCreator.Create(new Dictionary<string, object>()
{
	[OpenIdConnectParameterNames.AcrValues] = "2",
	[OpenIdConnectParameterNames.ClientId] = "client_a",
	[OpenIdConnectParameterNames.LoginHint] = $"MSISDN:{msisdn}",
	[OpenIdConnectParameterNames.Scope] = "openid mc_identity_basic",
	[MobileConnectParameterNames.ClientNotificationToken] = "token-for-sp-notification",
	[MobileConnectParameterNames.NotificationUri] = "http://client-a.ru/notification"
}, settings.PrivateKey!, settings.Kid);
