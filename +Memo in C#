//Q: ObsoleteAttribute. Why should use? 
//A: Internally, it can be used in refactors to replace poorly-implemented-but-working functionality in a gradual way. 
//You mark it as obsolete and start working through the warnings until you see no more of them, then you can proceed to safely remove it.
//The Obsolete attribute marks a program entity as one that is no longer recommended for use.

/*
//Q: Setting object's field like 'const' 

//For any variable that is not a primitive, 
//the const keyword 
//will not work. Instead you can use a combination of the static and readonly keywords.

class MyClass
{
   public static readonly PictureBox AvailablePic = new();
   public static readonly PictureBox UnavailablePic = new();

   static MyClass()
   {
      // Initialize the picture boxes here.
      AvailablePic.Image = Image.FromFile("available.png");
   }
...
}

ans2) You'll need to use readonly, not const, as you want to assign something that is not a compile time literal. To initialize the data:

Use an object initializer:

public static readonly PictureBox AvailablePic = new() { Value = "sample" };
*/

/* --- Задачи типа Task, Асинхронные методы. --- */
/* Thread-ы. TPL  c 4.0 Framework. Task - задача, выполняется параллельно основному потоку.
В .Net Framework  4.5 C#: async/await */


Task task = new Task(() =>  MyMethod());
//Task task = new Task(delegate { MyMethod(); });
//Task task = new Task(new Action( MyMethod));

task.Start(); //Задача стартовала! Параллельно
task.Wait(); //Хотим дождаться выполнения задачи
Task.WaitAll(task1, task2, task3); //Хотим дождаться выполнения всех(нескольких) задач
Task.WaitAny(task1, task2, task3); //Первую выполнившуюся

//Для того чтобы приостановить выполнение задачи из основного потока:
CancellationTokenSource cts = new CancellationTokenSource();
CancellationToken ct = cts.Token;

Task.Run(()=> DoWork(ct));

static void DoWork(CancellationToken token)
{
    //...
    if (token.IsCancellationRequested)
    {
        //Closing...
        throw new OperationCanceledException();
        //return; 
    }
}


//Распараллеленные циклы

double[] dArr = new double[50000];
Parallel.For(0, 50000, l => 
{
    dArr[l] = Math.Sqrt(l);
});

var coffeeList = new List<Coffee>();
foreach (Coffee coffee in coffeeList)
{
    CkeckAvailability(coffee);
}
//Эквивалентен
Parallel.ForEach(coffeeList, l => CkeckAvailability(l));


//Параллельный основному потоку запуск одной задачи После выполнения первой 
Task<string> firstTask = new(() => { return "Hello!"; });
//Task<string> firstTask = new(() => "Hello!");

Task<string> secondTask = firstTask.ContinueWith((fres) =>
{
    return String.Format("{0}, World!", fres.Result);
});

firstTask.Start();
Console.WriteLine(secondTask.Result);



//!!! Основа: выигрыш при параллельности может быть достигнут ТОЛЬКО на многоядерных процессорах.
//а сегодня процессоры всех эвм многоядерные

async void btnLongOperation_click(object sender)
{
    Task<string> task1 = Task.Run<string>(()=> {
        //...
        return String.Format(""); });
    lblResult.Content =  await task1; //!!! Это не(!) lblResult.Content = task1.Result;    
    //Не блокируется основной поток
}

async Task<string> GetData()
{
    var result = await Task.Run<string>(
        () => {
            //.... Thread.Sleep(10000);            
            return "Operation Complete.";
        }
        );
    return result;
}

async void btnGetData_click(object sender)
{
    lblResult.Content = await GetData();
}
//В отдельном потоке
//Обработчик в основном потоке.
//Основной поток не блокируется.


//Ещё важный пример await-а
Customer customer = new Customer();
var widgetsTask = _widgetService.GetAllWidgets(); //Уже запустился(!), параллельно
var foosTask = _fooService.GetAllWidgets(); //тоже запустился(!), параллельно
customer.Widgets = await widgetsTask; //а теперь дождёмся результата, освободив основной поток
customer.Foos = await foosTask; //а теперь дождёмся, освободив основной поток

return customer;


/* --- Классы File и FileInfo --- */
File – статический класс. FileInfo - объектный. 
 
Точно также, для папок Directory и DirectoryInfo.

File.Copy();
File.Exists();
File.AppendAllText(filePath, "\n56");
File.Create();
Directory.Exists();
Directory.GetFiles();
Directory.GetDirectories();
Directory.GetCurrentDirectory();

public static class Path {…}	
Path.Combine();

Пример:
var fileName = Path.Combine("C:\\", "newfile.txt");            
FileInfo fInfo = new FileInfo(fileName);
var writer = fInfo.AppendText(); --дописать в файл и(!) создать, если не был создан до.
writer.WriteLine("test_line 1");
writer.WriteLine("test_line 2");
writer.Dispose();



/* --- Methods --- */
//Extension method
public static class StringExt
{
    public static bool IsGoodPassword(this string s)
    {
        return s.Length > 7;
    }
}

//Опциональные аргументы метода:
//Интересный пример:
public static void DatesToPeriodConverter(DateTime start, DateTime end = DateTime.MinValue, out string date, out string time) {...} // - incorrect 
public static void DatesToPeriodConverter(DateTime start, DateTime? end = null, out string date, out string time) // - correct
{
    var effectiveEnd = end ?? DateTime.MinValue;
    ...
}  

//Пример метода который копирует объект с помощью сериализации и десериализации.
public static class ExtensionMethods
{
    public static T DeepClone<T>(this T a)
    {
        using (MemoryStream stream = new MemoryStream())
        {
            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Serialize(stream, a);
            stream.Position = 0;
            return (T)formatter.Deserialize(stream);
        }
    }
}

//Операторы(сравнения) ни что иное как методы (булевозначные (статические))
public static bool operator >(T left, T right)
{
    return true;
}

http – hypper text transport protocol


/* --- Constraints --- */
//public static interface ISt // нельзя создать интерфейс для статики!
//{
//}

//public interface ISt
//{
//    static void Mt(); 			//static нельзя в интерфейсах.
//    static int prop { get; set; }		//static нельзя в интерфейсах.
//}

//static class ClassSt1 /*: ClassSt2 */ // Нельзя унаследоваться от статического класса. И статический класс наследуется только от System.Object
//{
//}

public class CustomList<T> where T : ICollection { } // Теперь можно типизировать эту коллекцию только классами (ИЛИ Структурами) реализующими интерфейс  ICollection.
public class CustomList<T>  where  T : IBeverage, IComparable<T>, new(), struct (только структурами), class (только классами)


/* --- Журналирование --- */

string eventLog = "Application";
string eventSource = "Logging Demo";
if (!EventLog.SourceExists(eventSource))a
    EventLog.CreateEventSource(eventSource, eventLog);

EventLog.WriteEntry(eventSource, "Application started");


/* --- Экземпляр один. 
Ссылок на экземпляр может быть от 0 до N/8, где N кол-во выделенной оперативной памяти N(byte). --- */
char[] sch1 = new char[] { 'a', 'a', 'a', 'a', 'a'};
char[] sch2 = sch1;
for (int i = 0; i < sch2.Length; i++)
    sch2[i] = 'b';            
for (int i = 0; i < sch1.Length; i++)
    Console.WriteLine(sch1[i]);
/*
Output:
b
b
b
b
b
*/

char[] sch1 = new char[] { 'a', 'a', 'a', 'a', 'a'};
char[] sch2 = sch1;
sch2 = new char[] { 'b', 'b', 'b', 'b', 'b' }; 	/*Теперь ссылка «sch2« указывает на другой(!)*/
for (int i = 0; i < sch1.Length; i++)		/*экземпляр а через ссылки на первый экземпляр 
    Console.WriteLine(sch1[i]);			/*мы ничего не меняли */
/*
Output:
a 
a
a
a
a
*/



/* --- Сериализация объекта. --- */
using System.Runtime.Serialization.Formatters.Binary;

ServiceConfigutation config = new ();

IFormatter formatter = new BinaryFormatter();
FileStream buffer = File.Create("filepath");

formatter.Serialize(buffer, config);
buffer.Close();

//Десериализация
IFormatter formatter2 = new BinaryFormatter();
FileStream buffer2 = File.OpenRead("filepath");

ServiceConfigutation config2 =
    formatter2.Deserialize(buffer2) as ServiceConfigutation;
buffer2.Close();

///
JsonSerializer.Serialize(requestBody); //System.Text.Json.JsonSerializer
///
var fullResponse = JsonSerializer.Deserialize<DiscoveryResponse>(responseString); //System.Text.Json.JsonSerializer



//<Custom httpClient>
public class GitHubClient
{
    public HttpClient Client { get; }
    
    public GitHubClient(HttpClient httpClient) //конструктор
    {
        httpClient.BaseAddress = new Uri("https://api.github.com/"); 
        httpClient.DefaultRequestHeaders.Add("Accept", "application/vnd.github.v3+json");
        httpClient.DefaultRequestHeaders.Add("User-Agent", "HttpClientFactory-Sample");
        Client = httpClient;
    }
}


//Register this as a typed client using the following line.
services.AddHttpClient<GitHubClient>();


//And, use it in the following way in the API controller.
public class ValuesController : Controller
{
    GitHubClient _gitHubClient;;
  
    public ValuesController(GitHubClient gitHubClient)
    {
        _gitHubClient = gitHubClient;
    }
  
    [HttpGet]
    public async Task<ActionResult> Get()
    {
        string result = await _gitHubClient.client.GetStringAsync("/");
        return Ok(result);
    }
}
//</Custom httpClient>




// На скорую руку заселектить из бд
public static async Task<T?> SqlQueryRawAsync<T>(string query, Func<DbDataReader, T> map) where T : class?//, new() 
{
	using (var context = new AggregatorContext())
	{
		using (var command = context.Database.GetDbConnection().CreateCommand())
		{
			command.CommandText = query;
			command.CommandType = CommandType.Text;
			context.Database.OpenConnection();
			using (var result = await command.ExecuteReaderAsync())
			{
				T entity = null;
				if (await result.ReadAsync())
				{
					entity = map(result);
					return entity;
				}
				return entity;
			}
		}
	}
}



//<DI for console app>
using Microsoft.Extensions.DependencyInjection;
using System;

namespace DiSample
{
    // STEP 1: Define an interface.
    /// <summary>
    /// Defines how a user is notified. 
    /// </summary>
    public interface INotifier
    {
        void Send(string from, string to, string subject, string body);
    }

    // STEP 2: Implement the interface
    /// <summary>
    /// Implementation of INotifier that notifies users by email.
    /// </summary>
    public class EmailNotifier : INotifier
    {
        public void Send(string from, string to, string subject, string body)
        {
            // TODO: Connect to something that will send an email.
        }
    }

    // STEP 3: Create a class that requires an implementation of the interface.
    public class ShoppingCart
    {
        INotifier _notifier;

        public ShoppingCart(INotifier notifier)
        {
            _notifier = notifier;
        }

        public void PlaceOrder(string customerEmail, string orderInfo)
        {
            _notifier.Send("admin@store.com", customerEmail, $"Order Placed", $"Thank you for your order of {orderInfo}");
        }

    }

    public class Program
    {
        // STEP 4: Create console app to setup DI
        static void Main(string[] args)
        {
            // create service collection
            var serviceCollection = new ServiceCollection();

            // ConfigureServices(serviceCollection)
            serviceCollection.AddTransient<INotifier, EmailNotifier>();

            // create service provider
            var serviceProvider = serviceCollection.BuildServiceProvider();

            // This is where DI magic happens:
            var shoppingCart = Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance<ShoppingCart>(serviceProvider);

            shoppingCart.PlaceOrder("customer@home.com", "2 Widgets");

            System.Console.Write("Press any key to end.");
            System.Console.ReadLine();
        }
    }
}
//</DI for console app>
